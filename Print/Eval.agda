module Print.Eval where

open import C
open import Print.AST
open import Data.Integer as ‚Ñ§ using (‚Ñ§)
open import Data.Bool renaming (Bool to ùîπ ; if_then_else_ to If_Then_Else_)
open import Data.Product
open import Data.Vec
open import Relation.Binary
open import Relation.Binary.PropositionalEquality
open import Data.Unit

import Data.Integer.Properties as ‚Ñ§‚Çö
import Data.Integer.DivMod as ‚Ñ§√∑
import Level

open import C.Properties.FreeVariables ‚¶É AST-C ‚¶Ñ

divide : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
divide x (‚Ñ§.pos 0) = ‚Ñ§.+ 0 -- Implementation defined
divide x y@(‚Ñ§.+[1+ n ]) = (x ‚Ñ§√∑.div y) {tt}
divide x y@(‚Ñ§.negsuc n) = (x ‚Ñ§√∑.div y) {tt}

data _<<_ : Rel (‚àÉ Œª Œ≤ ‚Üí IRef Œ≤) Level.zero where
  lit<<lit : ‚àÄ { x y } ‚Üí x ‚Ñ§.< y ‚Üí (Int , lit x) << (Int , lit y)

isStrictTotalOrder : IsStrictTotalOrder _‚â°_ _<<_

AST-FV : FreeVariables isStrictTotalOrder

open import C.Properties.State ‚¶É AST-C ‚¶Ñ ‚¶É AST-FV ‚¶Ñ
open import C.Properties.ReductionSemantics ‚¶É AST-C ‚¶Ñ ‚¶É AST-FV ‚¶Ñ

judge : ‚àÄ { Œ± } { v : ‚ü¶ Œ± ‚üß } ‚Üí Env ‚Üí IExpr Œ± ‚Üí Value Œ± v

step : State ‚Üí State
step s = {!!}

AST-Semantics : Semantics
Semantics._‚Üù_ AST-Semantics S‚ÇÅ S‚ÇÇ = step S‚ÇÅ ‚â° S‚ÇÇ

eval-statement : ‚àÄ { Œ± } ‚Üí (IRef Œ± ‚Üí IStatement) ‚Üí ‚ü¶ Œ± ‚üß
eval-statement s = {!Semantics._‚Üù_ AST-Semantics!}

eval : ‚àÄ { Œ± } ‚Üí (‚àÄ ‚¶É ‚Ñê : C ‚¶Ñ ‚Üí C.Ref ‚Ñê Œ± ‚Üí C.Statement ‚Ñê) ‚Üí ‚ü¶ Œ± ‚üß
eval s = eval-statement (s ‚¶É AST-C ‚¶Ñ)
